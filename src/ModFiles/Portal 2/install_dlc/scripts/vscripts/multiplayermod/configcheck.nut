//---------------------------------------------------
//         *****!Do not edit this file!*****
//---------------------------------------------------
// Purpose: Verifies valid options in config.nut
//           and compensates for each variable.
//---------------------------------------------------

// Can't create a function to redefine existing
// variables, so we just do it one by one :D

local ConfigValueError = function(invalidorundefined, command) {
    printlP2MM(invalidorundefined + " value provided for " + command + "! Treating as default value. Verify valid options for this in config.nut")
}

try {
    if (typeof(Config_DevMode) != "bool") {
        Config_DevMode <- false
        ConfigValueError("Invalid", "Config_DevMode")
    }
} catch (exception) {
    Config_DevMode <- false
    ConfigValueError("Undefined", "Config_DevMode")
}

try {
    if (typeof(Config_VisualDebug) != "bool") {
        Config_VisualDebug <- false
        ConfigValueError("Invalid", "Config_VisualDebug")
    }
} catch (exception) {
    Config_VisualDebug <- false
    ConfigValueError("Undefined", "Config_VisualDebug")
}

try {
    if (typeof(Config_UseCustomDevModels) != "bool") {
        Config_UseCustomDevModels <- false
        ConfigValueError("Invalid", "Config_UseCustomDevModels")
    }
} catch (exception) {
    Config_UseCustomDevModels <- false
    ConfigValueError("Undefined", "Config_UseCustomDevModels")
}

try {
    if (typeof(Config_GameMode) != "integer") {
        Config_GameMode <- 0
        ConfigValueError("Invalid", "Config_GameMode")
    }
} catch (exception) {
    Config_GameMode <- 0
    ConfigValueError("Undefined", "Config_GameMode")
}

try {
    if (typeof(Config_RandomTurrets) != "bool") {
        Config_RandomTurrets <- false
        ConfigValueError("Invalid", "Config_RandomTurrets")
    }
} catch (exception) {
    Config_RandomTurrets <- false
    ConfigValueError("Undefined", "Config_RandomTurrets")
}

try {
    if (typeof(Config_RandomPortalSize) != "bool") {
        Config_RandomPortalSize <- false
        ConfigValueError("Invalid", "Config_RandomPortalSize")
    }
} catch (exception) {
    Config_RandomPortalSize <- false
    ConfigValueError("Undefined", "Config_RandomPortalSize")
}

try {
    if (typeof(Config_UseColorIndicator) != "bool") {
        Config_UseColorIndicator <- true
        ConfigValueError("Invalid", "Config_UseColorIndicator")
    }
} catch (exception) {
    Config_UseColorIndicator <- true
    ConfigValueError("Undefined", "Config_UseColorIndicator")
}

try {
    if (typeof(Config_UseJoinIndicator) != "bool") {
        Config_UseJoinIndicator <- true
        ConfigValueError("Invalid", "Config_UseJoinIndicator")
    }
} catch (exception) {
    Config_UseJoinIndicator <- true
    ConfigValueError("Undefined", "Config_UseJoinIndicator")
}

try {
    if (typeof(Config_UseNametags) != "bool") {
        Config_UseNametags <- true
        ConfigValueError("Invalid", "Config_UseNametags")
    }
} catch (exception) {
    Config_UseNametags <- true
    ConfigValueError("Undefined", "Config_UseNametags")
}

try {
    if (typeof(Config_SafeGuard) != "bool") {
        Config_SafeGuard <- false
        ConfigValueError("Invalid", "Config_SafeGuard")
    }
} catch (exception) {
    Config_SafeGuard <- false
    ConfigValueError("Undefined", "Config_SafeGuard")
}

try {
    if (typeof(Config_SetPlayerElasticity) != "integer") {
        Config_SetPlayerElasticity <- 0
        ConfigValueError("Invalid", "Config_SetPlayerElasticity")
    }
} catch (exception) {
    Config_SetPlayerElasticity <- 0
    ConfigValueError("Undefined", "Config_SetPlayerElasticity")
}

try {
    if (typeof(Config_UseChatCommands) != "bool") {
        Config_UseChatCommands <- true
        ConfigValueError("Invalid", "Config_UseChatCommands")
    }
} catch (exception) {
    Config_UseChatCommands <- true
    ConfigValueError("Undefined", "Config_UseChatCommands")
}

local SetDefaultAdminList = function() {
    Admins <- []
}

try {
    if (typeof(Admins) != "array") {
        SetDefaultAdminList()
        ConfigValueError("Invalid", "Admins")
    } else {
        foreach (admin in Admins) {
            local level = split(admin, "[]")[0]
            local SteamID = split(admin, "]")[1]

            if (typeof(level.tointeger()) != "integer" || typeof(SteamID.tointeger()) != "integer") {
                SetDefaultAdminList()
                ConfigValueError("Invalid", "Admins")
                return
            }
        }
    }
} catch (exception) {
    SetDefaultAdminList()
    ConfigValueError("Undefined", "Admins")
}
